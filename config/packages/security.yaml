security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        Symfony\Component\Ldap\Security\LdapUser: 'auto'

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
      app_ldap:
        ldap:
          service: Symfony\Component\Ldap\Ldap
          base_dn: '%env(resolve:LDAP_BASE_DN)%'
          search_dn: '%env(resolve:LDAP_SEARCH_DN)%'
          search_password: '%env(resolve:LDAP_SEARCH_PASSWORD)%'
          default_roles: ROLE_USER
          uid_key: uid
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            provider: app_ldap
            entry_point: jwt
            jwt: ~
            json_login_ldap:
              service: Symfony\Component\Ldap\Ldap
              dn_string: 'uid={username},%env(resolve:LDAP_BASE_DN)%'
              check_path: api_token_auth
              success_handler: lexik_jwt_authentication.handler.authentication_success
              failure_handler: lexik_jwt_authentication.handler.authentication_failure
              require_previous_session: false
            refresh_jwt:
              check_path: api_token_refresh
            logout:
              path: api_token_invalidate
        main:
            stateless: true
            lazy: true
            logout: ~

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
      - { path: ^/api/token, roles: PUBLIC_ACCESS }
      - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
